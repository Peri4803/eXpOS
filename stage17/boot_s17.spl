//load timer interrupt
loadi(4,17);
loadi(5,18);

//load expos library
loadi(63,13);
loadi(64,14);

//load init code
loadi(65,7);
loadi(66,8);

//load int10
loadi(22,35);
loadi(23,36);

//load excep handler
loadi(2, 15);
loadi(3, 16);

//load int7 write
loadi(16,29);
loadi(17,30);

//load mod0
loadi(40,53);
loadi(41,54);

//load mod4
loadi(48,61);
loadi(49,62);

//load mod5
loadi(50,63);
loadi(51,64);

//load int6 read
loadi(14,27);
loadi(15,28);

//load console interrupt
loadi(8,21);
loadi(9,22);

//int 9 
loadi(20, 33);
loadi(21, 34);

//module 1
loadi(42, 55);
loadi(43, 56);

//module 2
loadi(44, 57);
loadi(45, 58);

//inodeusertable
loadi(59, 3);
loadi(60, 4);

[TERMINAL_STATUS_TABLE]=0;

PTBR=PAGE_TABLE_BASE+20;
PTLR=10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

[PROCESS_TABLE+17]=1;
[PROCESS_TABLE+27]=80;
[PROCESS_TABLE+20]=CREATED;
[PROCESS_TABLE+28]=0;
[PROCESS_TABLE+29]=8*512;
[PROCESS_TABLE+30]=PAGE_TABLE_BASE+20;
[PROCESS_TABLE+31]=10;

alias i R0;
i = 0;
while(i < 128) do 
    if(i < 83) then 
        [MEMORY_FREE_LIST + i] = 1;
    else
        [MEMORY_FREE_LIST + i] = 0;
    endif;
    i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 2] = 45;
[SYSTEM_STATUS_TABLE + 3] = 0;


[76*512]=[65*512+1];

alias j R7;
j=2;

while(j<16) do
[PROCESS_TABLE+(j*16)+4]=TERMINATED;
j=j+1;
endwhile;

return;
