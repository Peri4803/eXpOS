alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE+1];

multipush (BP);

alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;

[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;

alias it R3;
it=currentPID+1;
alias newPID R4;
newPID=-1;

if(currentPID==15) then
	it=0;	
endif;

while(it!=currentPID) do
	if(it==16) then
		it=0;
	endif;
if([PROCESS_TABLE+(it*16)+4]==READY||[PROCESS_TABLE+(it*16)+4]==CREATED) then
newPID=it;
break;
endif;
it=it+1;
endwhile;

breakpoint;

if(newPID==-1) then
newPID=0;
endif;

alias new_process_table R5;
new_process_table = PROCESS_TABLE + newPID * 16;

//Set back Kernel SP, PTBR , PTLR
SP =  [new_process_table + 11] * 512 + [new_process_table + 12] ;
PTBR = [new_process_table + 14];
PTLR = [new_process_table + 15];

[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_table + 4] == CREATED) then
	[new_process_table + 4] = RUNNING;
	SP = [new_process_table + 13];
	[new_process_table+9]=0;
	BP = [[new_process_table + 11]*512];
	ireturn;
endif;

[new_process_table + 4] = RUNNING;

multipop (BP);

return;


