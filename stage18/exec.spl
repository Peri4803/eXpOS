[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 9;

alias userSP R0;
userSP = SP;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13]=SP;
SP=[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 11]*512-1;

alias physicalPageNum R1;
alias offset R2;
alias filenameAddr R3;
physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
filenameAddr = (physicalPageNum * 512) + offset;
alias filename R4;
filename =[filenameAddr];

alias start R5;
start=0;

alias check R6;
check=-1;

alias index R7;

while(start<60) do
 if([INODE_TABLE+ start*16 + 1]== filename) then
	index=start;
	check=0;
	break;
 endif;
 start=start+1;
endwhile;

if(check==-1) then 
alias physicalAddrRetVal R8;
	 physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	 [physicalAddrRetVal] = -1;
	SP= userSP;
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 9] =0;
	ireturn;
endif;

	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
	 R1= 3;
	 R2= [SYSTEM_STATUS_TABLE+1];
	call MOD_1;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);

alias userarea_page R9;
userarea_page = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11];

[MEMORY_FREE_LIST + userarea_page] = [MEMORY_FREE_LIST + userarea_page] +1;

[SYSTEM_STATUS_TABLE + 2] =[SYSTEM_STATUS_TABLE + 2]-1;

SP=[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 11]*512 -1; 

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 4] = RUNNING; 

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE +1]*16) + 7] =index;

//library
[PTBR  + 0]= 63;
[PTBR  + 1]= "0100";
[PTBR  + 2]= 64;
[PTBR  + 3]= "0100";


//get free pages for heap
multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
R1 = 1;
call MOD_2;

[PTBR  + 4]= R0;
[PTBR  + 5]= "0110";

multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);

multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
R1 = 1;
call MOD_2;

[PTBR  + 6]= R0;
[PTBR  + 7]= "0110";

multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);


//get free pages for stack
multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
R1 = 1;
call MOD_2;

[PTBR  + 16]= R0;
[PTBR  + 17]= "0110";

multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);

multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);
R1 = 1;
call MOD_2;

[PTBR + 18]= R0;
[PTBR + 19]= "0110";

multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8,R9);

//get free pages for code
alias i R10;
i = 8;

while(i<= 11)  do

if([INODE_TABLE + index*16 + i] != -1) then

multipush(R0,R1,R2,R3,R5,R6,R7,R8,R9,R10);
R1 = 1;
call MOD_2;

[PTBR  + 8 +(i-8)*2] = R0;
[PTBR  + 8 + (i-8)*2 + 1]= "0100";

multipop(R0,R1,R2,R3,R5,R6,R7,R8,R9,R10);

multipush(R0,R1,R2,R3,R5,R6,R7,R8,R9,R10);
R1 = 2;
R2 = [SYSTEM_STATUS_TABLE+1];
R3 = [PTBR + 8 +(i-8)*2];
R4 = [INODE_TABLE+ index*16+i];
call MOD_4;

multipop(R0,R1,R2,R3,R5,R6,R7,R8,R9,R10);

else

[PTBR  + 8 +(i-8)*2]= -1;
[PTBR  + 8 + (i-8)*2 + 1]= "0000";

endif;

i=i+1;

endwhile;


[[PTBR + 16]*512] = [[PTBR + 8]*512 + 1];

SP = 8*512 ;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 9] = 0; 
breakpoint;
ireturn;

	








